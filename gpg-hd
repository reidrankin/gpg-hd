#!/usr/bin/env python3

# Special thanks to Arttu Kasvio's idea of using pem2openpgp / HMAC_DRBG

import os
import subprocess
from Crypto.PublicKey import RSA
import pexpect
import argparse
from bip85 import BIP85
from bip85 import BIP85DRNG

gpg_cmdline = "gpg --homedir temp --keyring trustedkeys.gpg --no-default-keyring --expert "
subkey_cmdline = " --command-fd=0 --status-fd=1 --pinentry-mode=loopback --edit-key "

def GPG_get_masterkey():
  id = subprocess.Popen(gpg_cmdline + "--list-keys | " \
    "tail -n +3 | awk \'{ print $1 }\' | grep -v \"pub\" | grep -v \"uid\" | tr -s \'\\n\' \'\\n\'", \
    stdout=subprocess.PIPE, \
    stdin=subprocess.PIPE, \
    shell=True \
    )
  return id.communicate()[0].decode("utf-8").strip()


def GPG_get_keygrips():
  # Get keygrips
  kg = subprocess.Popen(gpg_cmdline + \
    "--with-keygrip -K | grep \"Keygrip\" | awk \'{ print $3 }\'", \
    stdout=subprocess.PIPE, \
    stdin=subprocess.PIPE, \
    shell=True \
    )
  return kg.communicate()[0].decode("utf-8").strip().split('\n')


def GPG_set_primary_key(keyID, timestamp, sign_with_master):
  # Set masterkey as primary
  extra_commands = ""
  if (sign_with_master):
    extra_commands += "echo change-usage; echo S; echo Q;"
  child = pexpect.spawn( \
    "bash -c \"{ echo uid 1; echo primary; " + extra_commands + " echo q; echo y; echo y; } | " \
    + gpg_cmdline + subkey_cmdline + keyID \
    )
  child.interact()


def GPG_add_auth_subkey(parent_keyID, subkey_grip, timestamp):
  # Auth subkey
  child = pexpect.spawn( \
    "bash -c \"{ echo addkey; echo 13; echo S; echo E; echo A; echo Q; echo 0; echo save; } | " \
    + gpg_cmdline + "--faked-system-time=" + timestamp + subkey_cmdline + parent_keyID \
    )
  child.expect (["Enter the keygrip: ",  pexpect.EOF, pexpect.TIMEOUT])
  child.send(subkey_grip + "\r")
  child.interact()


def GPG_add_enc_subkey(parent_keyID, subkey_grip, timestamp):
  # Enc subkey
  child = pexpect.spawn( \
    "bash -c \"{ echo addkey; echo 13; echo S; echo Q; echo 0; echo save; } | " \
    + gpg_cmdline + "--faked-system-time=" + timestamp + subkey_cmdline + parent_keyID \
    )
  child.expect (["Enter the keygrip: ", pexpect.EOF, pexpect.TIMEOUT])
  child.send(subkey_grip + "\r")
  child.interact()


def GPG_add_sig_subkey(parent_keyID, subkey_grip, timestamp):
  # Sig subkey
  child = pexpect.spawn( \
    "bash -c \"{ echo addkey; echo 13; echo E; echo Q; echo 0; echo save; } | " \
    + gpg_cmdline + "--faked-system-time="  + timestamp + subkey_cmdline + parent_keyID \
    )
  child.expect (["Enter the keygrip: ", pexpect.EOF, pexpect.TIMEOUT])
  child.send(subkey_grip + "\r")
  child.interact()


def GPG_import_keychain(keychain_filename):
    gpg_import = subprocess.Popen(gpg_cmdline + "--import " + keychain_filename, stdout=subprocess.PIPE, shell=True)
    print(gpg_import.communicate()[0].decode("utf-8"))


def GPG_create_key(user_id, seed, key_bits, timestamp):
  # Create deterministic raw GPG key
  drng_reader = BIP85DRNG.new(seed)
  rsa_key = RSA.generate(bits=key_bits, randfunc=drng_reader.read, e=65537)
  rsa_pem = rsa_key.exportKey(format='PEM', pkcs=1)

  # Since we're auto-generating the key, default the creation time to UNIX time of (timeStamp)
  os.environ['PEM2OPENPGP_TIMESTAMP'] = timestamp
  # pem2openpgp "Foo Bar <fbar@linux.net>" < priv.pem | gpg --import
  pem2openpgp = subprocess.Popen(['pem2openpgp', user_id], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
  gpg_key = pem2openpgp.communicate(rsa_pem)[0]

  os.system("mkdir -p temp && chmod 700 -R temp")
  os.environ['GNUPGHOME'] = "temp"

  # Import openPGP-formatted RSA key into GPG keychain
  gpg_import = subprocess.Popen(gpg_cmdline + "--import", stdin=subprocess.PIPE, shell=True)
  gpg_import.communicate(gpg_key)


def GPG_export_keychain(keyID, timestamp, private_filename, public_filename, ssh_filename):
  # Export full private keychain to file
  gpg_export = subprocess.Popen(gpg_cmdline + "--armor --export-secret-keys " + keyID, \
    stdout=subprocess.PIPE, shell=True)
  privateKeyChain = gpg_export.communicate()[0].decode("utf-8")
  keyChainfile = open(private_filename, "w")
  keyChainfile.write(privateKeyChain)
  keyChainfile.close()

  # Export full public keychain to file
  export = subprocess.Popen(gpg_cmdline + "--armor --export " + keyID, stdout=subprocess.PIPE, shell=True)
  publicKeyChain = export.communicate()[0].decode("utf-8")
  keyChainfile = open(public_filename, "w")
  keyChainfile.write(publicKeyChain)
  keyChainfile.close()

  # Export SSH public key to file
  # Fake time necessary if key is already expired
  export = subprocess.Popen(gpg_cmdline + "--faked-system-time=" + timestamp +  \
    " --export-ssh-key " + keyID, stdout=subprocess.PIPE, shell=True)
  ssh_key = export.communicate()[0].decode("utf-8")
  sshfile = open(ssh_filename, "w")
  sshfile.write(ssh_key)
  sshfile.close()


def GPG_card_write(keyID, sign_with_master):
  cmd_line = gpg_cmdline + "--command-fd=0 --status-fd=1 --edit-key " + keyID

  #Write Enc key to card
  child = pexpect.spawn("bash -c \"{ echo key 1; echo keytocard; echo 2; echo y; } | " + cmd_line)
  child.interact()

  #Write Auth key to card
  child = pexpect.spawn("bash -c \"{ echo key 2; echo keytocard; echo 3; echo y; } | " + cmd_line)
  child.interact()

  #Write Sig key to card
  if (sign_with_master):
    child = pexpect.spawn("bash -c \"{ echo keytocard; echo y; echo 1; echo y; } | " + cmd_line)
  else:
    child = pexpect.spawn("bash -c \"{ echo key 3; echo keytocard; echo 1; echo y; } | " + cmd_line)
  child.interact()


if __name__ == '__main__':
  os.system("rm -rf temp *.asc keys/* > /dev/null 2>&1")
  os.system("killall gpg-agent scdaemon ssh-agent > /dev/null 2>&1")
  print("\n")
  parser = argparse.ArgumentParser()
  parser.add_argument("mnemonic", type=str, help="BIP39 mnemonic phrase")
  parser.add_argument("-n", "--name", help="Full Name")
  parser.add_argument("-e", "--email", help="Email")
  parser.add_argument("-c", "--card", help="Write subkeys to Yubikey", action="store_true")
  parser.add_argument("-s", "--sign-with-master", help="Use the master key to SIGN as well as CERTIFY, instead of creating a separate signature subkey", action="store_true")
  parser.add_argument("-b", "--key-bits", help="number of bits for each RSA key")
  parser.add_argument("-i", "--key-index", help="number of bits for each RSA key")
  args = parser.parse_args()

  if (args.name):
    name = args.name
  else:
    name = input('Name: ')
  if (args.email):
    email = args.email
  else:
    email = input('Email: ')
  card_write = False
  if (args.card):
    card_write = True
  else:
    # Assume if they forget name or email, they probably should be asked about writing to cards
    if (not args.email or not args.name):
      if(input('Write keys to card? [y/n]: ') == 'y'):
        card_write = True
  sign_with_master = False
  if (args.sign_with_master):
    sign_with_master = True
  key_bits = 4096
  if (args.key_bits):
    key_bits = int(args.key_bits)
  key_index = 0
  if (args.key_index):
    key_index = int(args.key_index)
  if (args.mnemonic):
    mnemonic = str(args.mnemonic)
  else:
    mnemonic = input('Mnemonic: ')
  user_id = '%s <%s>' % (name, email)

  bip85 = BIP85()
  masterkey_path = "m/83696968'/828365'/" + str(key_bits) + "'/" + str(key_index) + "'"
  masterkey_seed = bip85.bip39_mnemonic_to_entropy(masterkey_path, mnemonic)
  enckey_seed = bip85.bip39_mnemonic_to_entropy(masterkey_path + "/0'", mnemonic)
  authkey_seed = bip85.bip39_mnemonic_to_entropy(masterkey_path + "/1'", mnemonic)
  if not sign_with_master: sigkey_seed = bip85.bip39_mnemonic_to_entropy(masterkey_path + "/2'", mnemonic)

  timestamp = "1231006505"

  # Create master CA key
  GPG_create_key(user_id, masterkey_seed, key_bits, timestamp)
  masterkeyID = GPG_get_masterkey()

  # Create 3 subkeys
  GPG_create_key(user_id, enckey_seed, key_bits, timestamp)
  GPG_create_key(user_id, authkey_seed, key_bits, timestamp)
  if not sign_with_master: GPG_create_key(user_id, sigkey_seed, key_bits, timestamp)

  # GPG needs grips for moving to subkeys
  keygrips = GPG_get_keygrips()

  # Assemble the keychain
  GPG_set_primary_key(masterkeyID, timestamp, sign_with_master)
  GPG_add_enc_subkey(masterkeyID, keygrips[1], timestamp)
  GPG_add_auth_subkey(masterkeyID, keygrips[2], timestamp)
  if not sign_with_master: GPG_add_sig_subkey(masterkeyID, keygrips[3], timestamp)

  os.system("mkdir -p keys")
  keys_path = os.path.join(os.path.dirname(__file__) , "keys")
  GPG_export_keychain(masterkeyID, timestamp, \
    os.path.join(keys_path, "private_keychain.asc"), \
    os.path.join(keys_path, "public_keychain.asc"), \
    os.path.join(keys_path, "ssh_key.asc") \
    )

  # GPG is lame and doesn't like when we remove old keyIDs that are now attached to subkeys,
  # so lets start over with fresh keydb
  os.system("rm -rf temp && mkdir -p temp && chmod 700 -R temp")
  os.environ['GNUPGHOME'] = "temp"

  GPG_import_keychain(os.path.join(keys_path, "private_keychain.asc"))

  # just for show...
  print("\n\n\n")
  gpg_list = subprocess.Popen(gpg_cmdline + "--list-keys", shell=True)
  gpg_list.communicate()
  print("\n")
  print(os.path.join(keys_path, "private_keychain.asc") + " Created\n")
  print(os.path.join(keys_path, "public_keychain.asc") + " Created\n")
  print(os.path.join(keys_path, "ssh_key.asc") + " Created\n")

  if(card_write):
    GPG_card_write(masterkeyID, sign_with_master)

  os.system("rm -rf temp")
